import numpy as np

def first_theory(D, b, C):
    # Первая теорема двойственности
    # D - матрица, составленная из компонентов векторов,
    # входящих в последний базис, при котором получен
    # оптимальный план исходной задачи
    # b - вектор ограничений
    # C- базисные коэффициенты
    print("Первая Теорема Двойственности:")
    # Нахождение обратной матрицы D
    inverse_D = np.linalg.inv(D)
    print("D-inverse =\n", np.around(inverse_D, decimals=3))
    # Нахождение оптимального плана задачи через скалярное произведение
    y = np.dot(C, inverse_D)
    print("y =", np.around(y, decimals=3))
    # Вычисление минимального значения целевой функции двойственной задачи
    g = np.dot(b, y)
    print("g(y) = ", np.around(g, decimals=3))


# Настройка вывода программы
np.set_printoptions(suppress=True)
# Входные данные
D = np.array([[1, 0, 0, 1],
              [0.5, 1, 0, 1],
              [0, 0, 1, 1],
              [0.8, 0, 0, 1.5]])
b = np.array([16, 12, 12, 16])
C = np.array([20, 0, 0, 30])
print("Входные данные:")
print("D =\n", D)
print("b =", b)
print("C =", C)
# Первая Теорема Двойственности
first_theory(D, b, C)
